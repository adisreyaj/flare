generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  firstName            String
  lastName             String
  image                String?
  email                String         @unique
  username             String?         @unique
  password             String?
  followers            User[]         @relation("UserFollows", references: [id])
  following            User[]         @relation("UserFollows", references: [id])
  bio                  UserBio?       @relation(fields: [userBioId], references: [id])
  userBioId            String?
  comments             Comment[]
  flares               Flare[]        @relation("FlareAuthor")
  isOnboarded          Boolean        @default(false)
  onboardingState      Json
  likes                Like[]
  bookings             Booking[]
  tips                 Tip[]          @relation("TippingUser")
  tipsGiven            Tip[]          @relation("TippedUser")
  sponsors             Sponsor[]      @relation("SponsoringUser")
  sponsoring           Sponsor[]      @relation("SponsoredByUser")
  bookmarks            Bookmark[]
  kudos                Kudos[]        @relation("KudosUser")
  kudosGiven           Kudos[]        @relation("KudosByUser")
  preferences          Preferences?
  headerPromosReceived HeaderPromo[]  @relation("PromoReceivedByUser")
  headerPromosSent     HeaderPromo[]  @relation("PromoSentByUser")
  notifications        Notification[] @relation("NotificationReceivedByUser")
  notificationsPartOf  Notification[] @relation("NotificationPartOfByUser")
}

model UserBio {
  id          String  @id @default(cuid())
  description String?
  github      String?
  twitter     String?
  linkedin    String?
  facebook    String?
  hashnode    String?
  instagram   String?
  devto       String?
  user        User[]
}

model Preferences {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  kudos  Json
  blogs  Json
  header Json
}

model Flare {
  id           String         @id @default(cuid())
  blocks       Block[]
  author       User           @relation(fields: [authorId], references: [id], name: "FlareAuthor")
  deleted      Boolean        @default(false)
  comments     Comment[]
  likes        Like[]
  tags         String         @default("")
  createdAt    DateTime       @default(now())
  authorId     String
  tips         Tip[]
  bookmarks    Bookmark[]
  Notification Notification[]
}

model Block {
  id        String   @id @default(cuid())
  flare     Flare    @relation(fields: [flareId], references: [id])
  type      String
  content   Json
  createdAt DateTime @default(now())
  flareId   String
}

model Comment {
  id           String         @id @default(cuid())
  text         String
  author       User           @relation(fields: [authorId], references: [id])
  createdAt    DateTime       @default(now())
  flare        Flare?         @relation(fields: [flareId], references: [id])
  flareId      String?
  authorId     String
  Notification Notification[]
}

model Like {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  reaction  String
  createdAt DateTime @default(now())
  flare     Flare?   @relation(fields: [flareId], references: [id])
  flareId   String?
  authorId  String
}

model Notification {
  id         String           @id @default(cuid())
  to         User             @relation(fields: [toId], references: [id], name: "NotificationReceivedByUser")
  toId       String
  type       NotificationType
  followee   User             @relation(fields: [followeeId], references: [id], name: "NotificationPartOfByUser")
  followeeId String
  flare      Flare?           @relation(fields: [flareId], references: [id])
  comment    Comment?         @relation(fields: [commentId], references: [id])
  createdAt  DateTime         @default(now())
  content    Json?
  read       Boolean          @default(false)
  flareId    String?
  commentId  String?
}

model Bookmark {
  id        String   @id @default(cuid())
  flare     Flare    @relation(fields: [flareId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  flareId   String
  authorId  String
}

model Slot {
  id        String    @id @default(cuid())
  name      String
  date      Json
  time      Json
  days      Json
  active    Boolean
  paid      Boolean
  plan      Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  bookings  Booking[]
}

model Booking {
  id               String         @id @default(cuid())
  date             DateTime
  slot             Slot           @relation(fields: [slotId], references: [id])
  invitee          User           @relation(fields: [userId], references: [id])
  status           BookingStatus
  paid             Boolean
  plan             Json
  payment          BookingPayment @relation(fields: [bookingPaymentId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  bookingPaymentId String         @unique
  userId           String
  slotId           String
}

model BookingPayment {
  id        String   @id @default(cuid())
  amount    Float
  currency  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  booking   Booking?
}

model Tip {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], name: "TippingUser")
  tippedBy       User     @relation(fields: [tippedById], references: [id], name: "TippedUser")
  createdAt      DateTime @default(now())
  amount         Float
  currency       Json
  flare          Flare    @relation(fields: [flareId], references: [id])
  paymentDetails Json
  flareId        String
  userId         String
  tippedById     String
}

model Sponsor {
  id             String         @id @default(cuid())
  type           SponsoringType
  amount         Float
  currency       Json
  paymentDetails Json
  user           User           @relation(fields: [userId], references: [id], name: "SponsoringUser")
  sponsoredBy    User           @relation(fields: [sponsoredById], references: [id], name: "SponsoredByUser")
  createdAt      DateTime       @default(now())
  userId         String
  sponsoredById  String
}

model Kudos {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], name: "KudosUser")
  kudosBy   User     @relation(fields: [kudosById], references: [id], name: "KudosByUser")
  createdAt DateTime @default(now())
  content   Json
  kudosById String
  userId    String
}

model HeaderPromo {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id], name: "PromoReceivedByUser")
  userId      String
  sponsor     User       @relation(fields: [sponsorId], references: [id], name: "PromoSentByUser")
  sponsorId   String
  image       Json
  title       String
  description String
  price       Json
  state       PromoState
  createdAt   DateTime   @default(now())
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum SponsoringType {
  ONE_TIME
  MONTHLY
  ANNUALLY
}

enum PromoState {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}

enum NotificationType {
  FOLLOW
  REACTION
  COMMENT
  FLARE
}
